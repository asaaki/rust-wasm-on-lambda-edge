[package]
name = "rust-wasm-on-lambda-edge"
version = "0.1.0"
authors = ["Christoph Grabo <asaaki@mannaz.cc>"]
edition = "2018"
license = "MIT OR Apache-2.0"
description = "Business logic for the WebAssembly module"
repository = "https://github.com/asaaki/rust-wasm-on-lambda-edge"
publish = false

[lib]
name = "mod" # determines the output filename of the compilation
crate-type = ["cdylib", "rlib"]

# If possible and feasible you should stick to no_std dependencies,
# at least it will make your life easier.
# Biggest hurdle for me in the past were deps relying on some system timer,
# which is not available in WASM land, of course.
[dependencies]
wasm-bindgen = { version = "0.2.78", features = ["serde-serialize", "enable-interning"] }
wasm-bindgen-futures = "0.4.28"

# saves some kilobytes, but might also not result in the fasted code possible
wee_alloc = "0.4.5"

# for printing nicer panics
console_error_panic_hook = "0.1.7"

# Note: not using the no-std setup, because wasm-bindgen does not either
serde = { version = "1.0.130", features = ["derive"] }
serde_json = "1.0.72"
serde-wasm-bindgen = "0.3.1"
base64 = "0.13.0"

js-sys = "0.3.55"
web-sys = { version = "0.3.55", features = ["console"] }

# if you need something like std::time::Instant::now() in WebAssembly:
# instant = { version = "0.1", features = [ "wasm-bindgen", "now" ] }

[dev-dependencies]
wasm-bindgen-test = "0.3.28"

[profile.release]
lto = true
codegen-units = 1 # can save some bytes, but compilation is a tad slower
opt-level = "s" # best option so far

# has no real effect on final wasm size
# [profile.release.package.'*']
# codegen-units = 1
# opt-level = "s"

# since wasm-bindgen 0.2.70 it should not be needed anymore
# [package.metadata.wasm-pack.profile.release]
# wasm-opt = ["-Oz", "--enable-mutable-globals"]
