name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RUSTFLAGS: -Dwarnings

jobs:
  build_and_test:
    name: Build and test
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust: [stable]
        # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions-restrictions.html#lambda-at-edge-runtime-restrictions
        # note: only use active versions; EOLs will be dropped
        node-version: ['16', '14']

    steps:
    - uses: actions/checkout@v2

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true

    # https://github.com/jetli/wasm-pack-action
    - uses: jetli/wasm-pack-action@v0.3.0
      with:
        version: 'latest'
    # alternative:
    # - name: Install wasm-pack
    #   run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - uses: Swatinem/rust-cache@v1
      with:
        working-directory: rust

    - uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: make test
    - run: make ci

  checks:
    name: Checks for fmt, clippy, and docs
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@master

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - uses: Swatinem/rust-cache@v1
      with:
        working-directory: rust

    - run: make ci.checks
    # no config for work dir - if working it should provide comments in PRs
    # - uses: actions-rs/clippy-check@v1
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     args: --all-features
